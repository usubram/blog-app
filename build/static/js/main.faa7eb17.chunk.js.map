{"version":3,"sources":["components/StoryViewer.js","api/stories.js","constants/ActionTypes.js","reducers/index.js","components/EditStories.js","components/CreateNew.js","containers/SimpleStoryBoardContainer.js","actions/index.js","components/Nav.js","containers/BlogLayout.js","containers/App.js","index.js"],"names":["StoryViewer","title","story","handleEdit","handleDelete","class","id","timestamp","Date","toLocaleDateString","text","href","onClick","cb","timeout","setTimeout","fetch","then","response","json","result","newEntry","method","headers","body","JSON","stringify","entry","StoreDataContext","React","createContext","state","type","value","sort","a","b","valueOf","selectedItem","filter","item","EditStories","handleCancel","handleUpdate","onChange","e","target","CreateNew","handleSave","toISOString","for","storiesApi","SimpleStoryBoardContainer","setShouldUpdate","useContext","dispatch","useState","isEdit","setIsEdit","isNew","setIsNew","currentPost","setCurrentPost","toBeDeletedStory","stories","deleteStory","console","log","modifiedStory","updateStory","path","map","key","Nav","BlogLayout","useReducer","reducer","shouldUpdate","useEffect","fetchStories","Provider","App","render","document","getElementById"],"mappings":"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","file":"static/js/main.faa7eb17.chunk.js","sourcesContent":["import React, { useState, useEffect, useReducer} from 'react';\nimport PropTypes from 'prop-types'\n\nconst StoryViewer = ({ title, story, handleEdit, handleDelete }) => {\n\n  const formatDate = (timestamp) =>\n    new Date(timestamp).toLocaleDateString()\n\n  return (\n    <div class='post-row'>\n      <h3 class='post-title' id={story.id}>{story.title}</h3>\n      <div class='post-time'>{formatDate(story.timestamp)}</div>\n      <p class='post-text'>{story.text}</p>\n      <a href='#' id={'edit-'+ story.id} onClick={() => handleEdit(story)}>Edit</a>\n      <a href='#' id={'delete-'+ story.id} onClick={() => handleDelete(story)}>Delete</a>\n    </div>\n  )\n}\n\nStoryViewer.propTypes = {\n  story: PropTypes.node,\n  title: PropTypes.string.isRequired\n}\n\nexport default StoryViewer\n","/**\n * Mocking client-server processing\n */\nimport _stories from './blog-posts.json'\n\nconst TIMEOUT = 100\n\nexport default {\n  fetchStories: (cb, timeout) => setTimeout(() => {\n    fetch('http://restedblog.herokuapp.com/umasubramanian/api/')\n      .then(response => response.json())\n      .then((result) => cb(result))\n  }, timeout || TIMEOUT),\n\n  createStory: (newEntry, cb, timeout) => setTimeout(() => {\n    fetch('http://restedblog.herokuapp.com/umasubramanian/api/', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        title: newEntry.title,\n        text: newEntry.text\n      })\n    })\n      .then(response => response.json())\n      .then((result) => cb(result))\n  }, timeout || TIMEOUT),\n\n  deleteStory: (entry, cb, timeout) => setTimeout(() => {\n    fetch(`http://restedblog.herokuapp.com/umasubramanian/api/${entry.id}`, {\n      method: 'DELETE',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      }\n    })\n      .then((response) => cb(response))\n  }, timeout || TIMEOUT),\n\n  updateStory: (entry, cb, timeout) => setTimeout(() => {\n    fetch(`http://restedblog.herokuapp.com/umasubramanian/api/${entry.id}`, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        title: entry.title,\n        text: entry.text\n      })\n    })\n      .then(response => response.json())\n      .then((result) => cb(result))\n  }, timeout || TIMEOUT)\n}\n","export const FETCH_STORIES = 'FETCH_STORIES'\nexport const EDIT_STORY = 'EDIT_STORY'\nexport const UPDATE_STORY = 'UPDATE_STORY'\nexport const ADD_STORY = 'ADD_STORY'\nexport const DELETE_STORY = 'DELETE_STORY'\n","import React from 'react';\nimport * as types from '../constants/ActionTypes'\n\nexport const StoreDataContext = React.createContext();\n\nexport default (state = [], { type , value }) => {\n  switch (type) {\n\n    case types.FETCH_STORIES:\n      return value.sort((a, b) => {\n        // Sort by date\n        return new Date(b.timestamp).valueOf() - new Date(a.timestamp).valueOf()\n      })\n  \n    case types.UPDATE_STORY:\n      let selectedItem = state.filter(item => item.id === value.id)\n      selectedItem = value;\n      return state;\n  \n    case types.ADD_STORY:\n      // place the new value in the first place. No need to sort.\n      return [value, ...state]\n\n    case types.DELETE_STORY:\n      return state.filter(item => item.id !== value.id);\n\n    default: {\n        return state\n      }\n  }\n}\n","import React, { useReducer } from 'react'\nimport PropTypes from 'prop-types'\n\nimport reducer from '../reducers'\nimport * as types from '../constants/ActionTypes'\n\nconst EditStories = ({ story, handleCancel, handleUpdate }) => {\n\n  const handleStoryChange = (e) => {\n    story.text = e.target.value\n  }\n\n  return (<div class='post-edit-body'>\n    <h2>Edit Post</h2>\n    <h3>{story.title}</h3>\n    <textarea class='edit-post-txt' onChange={handleStoryChange}>{story.text}</textarea>\n    <button onClick={() => handleUpdate(story)}>Update</button>\n    <button onClick={handleCancel}>Cancel</button>\n  </div>)\n}\n\nEditStories.propTypes = {\n  story: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    text: PropTypes.string.isRequired,\n    timestamp: PropTypes.string.isRequired\n  }).isRequired\n}\n\nexport default EditStories\n","import React, { useReducer, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport storiesApi from '../api/stories'\n\nconst CreateNew = ({handleCancel, handleSave }) => {\n  let story = {\n    id: '',\n    timestamp: new Date().toISOString(),\n    title: '',\n    text: ''\n  }\n\n  const handleStoryTitleChange = (e) => {\n    story.title = e.target.value\n  }\n\n  const handleStoryBodyChange = (e) => {\n    story.text = e.target.value\n  }\n\n  const handleSaveStory = (newEntry) => {\n    storiesApi.createStory(newEntry, (story) => {\n      handleSave(story);\n    })\n  }\n\n  return (<div class='post-edit-body'>\n    <h2>Create a new post</h2>\n    <lable for='create-new-title'>Title:</lable>\n    <input class='create-new-title' id='create-new-title'type=\"text\" onChange={handleStoryTitleChange}></input>\n    <lable for='create-new-title'>Body:</lable>\n    <textarea class='create-new-text' onChange={handleStoryBodyChange}></textarea>\n    <button onClick={() => handleSaveStory(story)}>Save</button>\n    <button onClick={handleCancel}>Cancel</button>\n  </div>)\n}\n\nCreateNew.propTypes = {\n  story: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    text: PropTypes.string.isRequired,\n    timestamp: PropTypes.string.isRequired\n  }).isRequired\n}\n\nexport default CreateNew\n","import React, { useState, useContext, useReducer} from 'react'\nimport PropTypes from 'prop-types'\nimport StoryViewer from '../components/StoryViewer'\nimport { deleteStory, updateStory } from '../actions'\n\nimport { StoreDataContext } from '../reducers/index'\nimport * as types from '../constants/ActionTypes'\nimport EditStories from '../components/EditStories'\nimport CreateNew from '../components/CreateNew'\n\nimport {\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nconst SimpleStoryBoardContainer = ({ setShouldUpdate }) => {\n  const { value = [], dispatch } = useContext(StoreDataContext)\n  const [isEdit, setIsEdit] = useState(false)\n  const [isNew, setIsNew] = useState(false)\n  const [currentPost, setCurrentPost] = useState({})\n\n  function handleEdit(story) {\n    setCurrentPost(story)\n    setIsEdit(true)\n  }\n\n  function handleCancel(story) {\n    setIsEdit(false)\n    setIsNew(false)\n  }\n\n  function handleUpdate(story) {\n    console.log('update', story)\n    updateStory(story, dispatch)\n    setIsEdit(false)\n  }\n\n  function handleSave(story) {\n    setIsNew(false)\n    setShouldUpdate(false)\n    dispatch({\n      type: types.ADD_STORY,\n      value: story\n    })\n  }\n\n  function handleCreateNew () {\n    setIsNew(true)\n  }\n\n  function handleDelete (story) {\n    deleteStory(story, dispatch);\n  }\n\n  if (isNew) {\n    return (\n      <CreateNew handleSave={handleSave} handleCancel={handleCancel} />\n    )\n  }\n\n  if (isEdit) {\n    console.log('currentPost', currentPost)\n    return (\n      <EditStories story={currentPost} handleUpdate={handleUpdate} handleCancel={handleCancel}/>\n    )\n  }\n\n  return (\n    <Route path=\"/\">\n    <div class=\"post-body\">\n    <a href=\"#\" onClick={() => handleCreateNew()}>Create new post</a>\n    {\n      value.map(story =>\n        <StoryViewer\n        key={story.id}\n        story={story} handleEdit={handleEdit} handleDelete={handleDelete} />)\n    }\n    </div>\n    </Route>)\n}\n\nSimpleStoryBoardContainer.propTypes = {\n  stories: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    text: PropTypes.string.isRequired,\n    timestamp: PropTypes.string.isRequired\n  })).isRequired\n}\n\nexport default SimpleStoryBoardContainer\n","import stories from '../api/stories'\nimport * as types from '../constants/ActionTypes'\n\nexport const fetchStories = (dispatch) => {\n  stories.fetchStories(stories => {\n    dispatch({\n      type: types.FETCH_STORIES,\n      value: stories\n    })\n  })\n}\n\nexport const updateStory = (modifiedStory, dispatch) => {\n  stories.updateStory(modifiedStory, (story) => {\n    dispatch({\n      type: types.UPDATE_STORY,\n      value: story\n    })\n  })\n}\n\nexport const deleteStory = (toBeDeletedStory, dispatch) => {\n  stories.deleteStory(toBeDeletedStory, () => {\n    dispatch({\n      type: types.DELETE_STORY,\n      value: toBeDeletedStory\n    })\n  })\n}\n","import React, { useReducer } from 'react';\nimport PropTypes from 'prop-types'\n\nconst Nav = ({ stories=[] }) => {\n\n  const formatDate = (timestamp) =>\n    new Date(timestamp).toLocaleDateString()\n\n  return (<div class='post-nav'>\n    <h3>Past Posts</h3>\n    {\n      stories.map(story => {\n        return (\n          <a href={'#' + story.id} key={story.id}>{formatDate(story.timestamp)} - {story.title}</a>\n          )\n        }\n      )\n    }\n  </div>)\n}\n\nNav.propTypes = {\n  children: PropTypes.node,\n  title: PropTypes.string.isRequired\n}\n\nexport default Nav\n","import React, { useState, useEffect, useReducer } from 'react';\nimport SimpleStoryBoardContainer from './SimpleStoryBoardContainer'\nimport Nav from '../components/Nav'\n\nimport { fetchStories } from '../actions'\nimport reducer, { StoreDataContext } from '../reducers/index'\n\nconst BlogLayout = () => {\n  const [state, dispatch] = useReducer(reducer, [])\n  const [shouldUpdate, setShouldUpdate] = useState(false);\n\n  useEffect(() => {\n    fetchStories(dispatch)\n  }, [shouldUpdate]);\n\n  return (\n    <StoreDataContext.Provider value={{ value: state, dispatch }}>\n      <div class=\"layout\">\n        <SimpleStoryBoardContainer stories={state} setShouldUpdate={setShouldUpdate} />\n        <Nav stories={state} />\n      </div>\n    </StoreDataContext.Provider>\n  )\n}\n\nexport default BlogLayout","import React from 'react'\nimport BlogLayout from './BlogLayout'\n\nimport globalCss from '../css/global.css'\n\nconst App = () => (\n  <div>\n    <header>\n      <h1>My Blog</h1>\n    </header>\n    <hr/>\n    <BlogLayout />\n  </div>\n)\n\nexport default App\n","import React from 'react'\nimport { render } from 'react-dom'\nimport App from './containers/App'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nrender(\n  <Router>\n    <Switch>\n      <App />\n    </Switch>\n  </Router>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}